@inproceedings{Podolskiy:2017:QCA:3069383.3069390,
 author = {Podolskiy, Vladimir and Gerndt, Hans Michael and Benedict, Shajulin},
 title = {QoS-based Cloud Application Management: Approach and Architecture},
 booktitle = {Proceedings of the 4th Workshop on CrossCloud Infrastructures \& Platforms},
 series = {Crosscloud'17},
 year = {2017},
 isbn = {978-1-4503-4934-5},
 location = {Belgrade, Serbia},
 pages = {7:1--7:2},
 articleno = {7},
 numpages = {2},
 url = {http://doi.acm.org/10.1145/3069383.3069390},
 doi = {10.1145/3069383.3069390},
 acmid = {3069390},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Cloud Resources Management, Graph, Quality of Services, Tuning Agent, Tuning Domain},
} 

@INPROCEEDINGS{7396164, 
author={A. {Bratterud} and A. {Walla} and H. {Haugerud} and P. E. {Engelstad} and K. {Begnum}}, 
booktitle={2015 IEEE 7th International Conference on Cloud Computing Technology and Science (CloudCom)}, 
title={IncludeOS: A Minimal, Resource Efficient Unikernel for Cloud Services}, 
year={2015}, 
pages={250-257}, 
keywords={C++ language;cloud computing;input-output programs;operating system kernels;resource allocation;IncludeOS;resource efficient unikernel;cloud services;cloud computing;elastically scaling services;single tasking library operating system;C++ language;extremely small disk-and memory footprint;efficient asynchronous I/O;OS-library;bootable disk image;DNS server;Operating systems;Libraries;Cloud computing;Hardware;Virtual machining;Standards;Virtual machine monitors;unikernel;library OS;full virtualization;virtio}, 
doi={10.1109/CloudCom.2015.89}, 
month={Nov},}


@book{Hightower:2017:KUR:3175917,
author = {Hightower, Kelsey and Burns, Brendan and Beda, Joe},
title = {Kubernetes: Up and Running Dive into the Future of Infrastructure},
year = {2017},
isbn = {1491935677, 9781491935675},
edition = {1st},
publisher = {O'Reilly Media, Inc.},
} 

@article{levine2016unik,
  title={Unik: A Platform for Automating Unikernels Compilation and Deployment},
  author={Levine, Idit},
  year={2016}
}

@article{madhavapeddy2014unikernels,
  title={Unikernels: the rise of the virtual library operating system},
  author={Madhavapeddy, Anil and Scott, David J},
  journal={Communications of the ACM},
  volume={57},
  number={1},
  pages={61--69},
  year={2014},
  publisher={ACM}
}

@misc{francia_2016, title={Unikernel Systems Joins Docker}, url={https://blog.docker.com/2016/01/unikernel/}, journal={Docker Blog}, author={Francia, Steve}, year={2016}, month={Jan}}

@misc{virtual, title={Virtual Kubelet}, url={https://virtual-kubelet.io/}, journal={Virtual Kubelet}}

@INPROCEEDINGS{iot-sec, 
author={K. {Zhao} and L. {Ge}}, 
booktitle={2013 Ninth International Conference on Computational Intelligence and Security}, 
title={A Survey on the Internet of Things Security}, 
year={2013}, 
volume={}, 
number={}, 
pages={663-667}, 
keywords={access control;authorisation;computer architecture;computer network security;Internet of Things;private key cryptography;routing protocols;sensor fusion;internet of things security;IoT security architecture;IoT security features;three-layer system structure;safety measures;perception layer;key management;key algorithm;security routing protocol;data fusion technology;authentication;access control;Authentication;Internet;Sensors;Computer architecture;Wireless sensor networks;Protocols;Internet of Things;Internet of Things Security;perception layer}, 
doi={10.1109/CIS.2013.145}, 
ISSN={}, 
month={Dec},}


 @misc{nanovms, 
 title={Unikernel Infrastructure}, url={https://nanovms.com/}, journal={NanoVMs}} 
 @misc{qemu, title={QEMU}, url={https://www.qemu.org/}, journal={QEMU}}

 @misc{coreos,
 title="CoreOS Hyperscales Linux By Making It Invisible",
 url={https://www.nextplatform.com/2015/02/25/coreos-hyperscales-linux-by-making-it-invisible/},
 journal={nextplatform.com},
 year={2015},
 month={June},
 author={ Morgan, Timothy Prickett}
 }

@misc{unfit-for-production,
title={Unikernels are unfit for production},
year={2016},
month={01},
author={Cantrill, Bryan},
url={https://www.joyent.com/blog/unikernels-are-unfit-for-production},
journal="joyent.com"
}


@misc{docker-acquisiton,
url="https://www.docker.com/docker-news-and-press/docker-acquires-unikernel-systems-extend-breadth-docker-platform",
year="2016",
month="01",
journal="docker.com"
}

@article{cloud-use-cases,
author = {Milenkoski, Aleksandar and Iosup, Alexandru and Kounev, Samuel and Sachs, Kai and Rygielski, Piotr and Ding, Jason and Cirne, Walfredo and Rosenberg, Florian},
year = {2013},
month = {05},
pages = {},
title = {Cloud Usage Patterns: A Formalism for Description of Cloud Usage Scenarios SPEC RG Cloud Working Group},
journal = {SPEC Technical Report}
}

@book{library-operating-system,
author = {Madhavapeddy, Anil and Mortier, Richard and Rotsos, Charalampos and Scott, David and Singh, Balraj and Gazagnaire, Thomas and Smith, Steven and Hand, Steven and Crowcroft, Jon},
file = {:Users/atakanyenel/Library/Application Support/Mendeley Desktop/Downloaded/Madhavapeddy et al. - Unknown - Unikernels Library Operating Systems for the Cloud.pdf:pdf},
isbn = {9781450318709},
keywords = {D1 [Programming Techniques],Organization and Design,Performance},
title = {{Unikernels: Library Operating Systems for the Cloud}}
}

@article{network-in-mirage,
abstract = {MirageOS is a modern library operating system written in the functional, memory-safe OCaml programming language. Users of MirageOS write application code in OCaml and link against various libraries provided by Mi-rageOS. These include a complete network stack (Ethernet, IP, TCP, UDP, TLS) written in pure OCaml as well as a number of backends for receiving and transmitting packets. We introduce some of MirageOS' techniques for handling raw memory. We detail two of the various networking backends offered by MirageOS as well as a library used for safe abstraction over raw memory. We additionally suggest possible performance improvements in MirageOS. Finally we compare MirageOS with ixy.ml, a small userspace driver for ixgbe-compatible NICs written entirely in OCaml.},
author = {Bonk, Fabian and Emmerich, Paul},
doi = {10.2313/NET-2019-06-1_10},
file = {:Users/atakanyenel/Library/Application Support/Mendeley Desktop/Downloaded/Bonk, Emmerich - Unknown - Networking in MirageOS.pdf:pdf},
keywords = {Index Terms-library operating system,OCaml,networking,unikernel},
title = {{Networking in MirageOS}},
url = {https://ocaml.org/}
}


@article{exokernel,
abstract = {Traditional operating systems limit the performance, flexibility, and functionality of applications by fixing the interface and implementation of operating system abstractions such as interprocess communication and virtual memory. The exokernel operating system architecture addresses this problem by providing application-level management of physical resources. In the exokernel architecture, a small kernel securely exports all hardware resources through a lowlevel interface to untrusted library...},
author = {Engler, D R and Kaaspoek, M F and O'Toole, J},
doi = {http://doi.acm.org/10.1145/224056.224076},
file = {:Users/atakanyenel/Desktop/thesis/literature/papers/2-engler95exokernel.pdf:pdf},
isbn = {0-89791-715-4},
journal = {Proceedings of the 15th ACM Symposium on Operating System Principles},
number = {December},
pages = {256--266},
title = {{ExoKernel: An Operating System Architecture for Application Level Resource Management}},
volume = {1},
year = {1995}
}

@techreport{nemesis,
abstract = {Support for multimedia applications by general purpose computing platforms has been the subject of considerable research. Much of this work is based on an evolutionary strategy in which small changes to existing systems are made. The approach adopted here is to start ab initio with no backward compatibility constraints. This leads to a novel structure for an operating system. The structure aims to decouple applications from one another and to provide multiplexing of all resources, not just the CPU, at a low level. The motivation for this structure, a design based on the structure, and its implementation on a number of hardware platforms is described.},
author = {Leslie, Ian and Mcauley, Derek and Black, Richard and Roscoe, Timothy and Barham, Paul and Evers, David and Fairbairns, Robin and Hyden, Eoin},
file = {:Users/atakanyenel/Library/Application Support/Mendeley Desktop/Downloaded/Leslie et al. - Unknown - The Design and Implementation of an Operating System to Support Distributed Multimedia Applications.pdf:pdf},
title = {{The Design and Implementation of an Operating System to Support Distributed Multimedia Applications}}
}

@techreport{openstack,
abstract = {Cloud computing is a quite new concept for which the resources are virtualized, dynamically extended and provided as a service on the Internet. In this paper, we present a comparative study between some of the IaaS (Infrastructure as a Service) commonly used to select the best suited one for deployment and research development in the field of cloud computing. The aim is to provide the computer industry with the opportunity to build a hosting architecture, massively scalable which is completely open source, while overcoming the constraints and the use of proprietary technologies. Then, we present the solution OpenStack retained by the comparative study. We discuss in detail its functional and architectural system. We finish by a discussion of the motivation of our choice of the IaaS solution.},
author = {Sefraoui, Omar and Aissaoui, Mohammed and Eleuldj, Mohsine},
booktitle = {International Journal of Computer Applications},
file = {:Users/atakanyenel/Library/Application Support/Mendeley Desktop/Downloaded/Sefraoui, Aissaoui, Eleuldj - 2012 - OpenStack Toward an Open-Source Solution for Cloud Computing(2).pdf:pdf},
keywords = {Eucalyptus,General Terms: OpenStack,IAAS,IaaS Keywords: Opencloud,OpenNebula,OpenStack,Scalableifx,Virtualization},
number = {03},
pages = {975--8887},
title = {{OpenStack: Toward an Open-Source Solution for Cloud Computing}},
volume = {55},
year = {2012}
}


@techreport{diamante,
abstract = {grow rapidly in 2019, transforming how applications are created, deployed, and managed. Enterprises are turning to containers to increase efficiency, facilitate application portability, and enable multi-cloud IT operations. Last year, in our inaugural Container Adoption Benchmark Survey we found that enterprises were still early in the container journey, but already demonstrating a strong preference for open source in the container stack, resulting in a strong trend from proprietary VM-based solutions to containers. This year we once again surveyed more than 500 IT leaders, and the results reinforce last year's findings, providing strong evidence that container technology is quickly entering the enterprise mainstream. The use of bare-metal containers is increasing as a way to reduce infrastructure complexity, deliver the full performance and efficiency benefits of the technology, and reduce costs by eliminating VMware licensing. Enterprises are focusing on a range of container use cases beyond cloud-native applications as they explore containerizing legacy applications and add support for big data and other workloads. Key Findings: n Cloud-native applications remain the number one container use case for 2019, according to 33 percent of respondents. n The database use case has moved up to a close second, chosen by 32 percent of respondents. n Respondents are running containers in multiple environments: on premises (45 percent), private cloud (29 percent), and public cloud (up to 37 percent). n Almost 56 percent who run containers on bare metal do so for higher performance; 36 percent choose bare metal to reduce costs. n Management complexity is the biggest bare-metal adoption challenge (36 percent) followed by time-to-deploy and keeping software up to date (both 22 percent). n For enterprises investing {\$}100k or more on containers, seventy percent are entering production in 2019, and more than one-third (34 percent) are running containers on bare metal. n For enterprises investing {\$}100k or more on containers, 43 percent plan to move some workloads to containers, while 26 percent intend to move most workloads to containers. EXECUTIVE SUMMARY},
file = {:Users/atakanyenel/Library/Application Support/Mendeley Desktop/Downloaded/Unknown - Unknown - Enterprise adoption of containers and Kubernetes continues to.pdf:pdf},
title ={Enterprise adoption of containers and Kubernetes continues to},
url = {https://diamanti.com/wp-content/uploads/2019/06/Diamanti_2019_Container_Survey.pdf},
year={2019}
}

@misc{kubernetes-load,
title = {{Building large clusters - Kubernetes}},
url = {https://kubernetes.io/docs/setup/best-practices/cluster-large/{\#}:{~}:targetText=16{\%}2C Kubernetes supports clusters with,more than 150000 total pods},
urldate = {2019-11-26}
}



@inproceedings{unikernels-improve,
abstract = {Cloud computing has been a great enabler for both the Internet of Things and Big Data. However, as with all new computing developments, development of the technology is usually much faster than consideration for, and development of, solutions for security and privacy. In a previous paper, we proposed that a unikernel solution could be used to improve security and privacy in a cloud scenario. In this paper, we outline how we might apply this approach to the Internet of Things, which can demonstrate an improvement over existing approaches.},
author = {Duncan, Bob and Happe, Andreas and Bratterud, Alfred},
booktitle = {Proceedings - 9th IEEE/ACM International Conference on Utility and Cloud Computing, UCC 2016},
doi = {10.1145/2996890.3007875},
file = {:Users/atakanyenel/Desktop/thesis/literature/papers/2-unikernels improve.pdf:pdf},
isbn = {9781450346160},
keywords = {Attack surface,Cloud security and privacy,Compliance},
month = {dec},
pages = {292--297},
publisher = {Association for Computing Machinery, Inc},
title = {{Enterprise IoT security and scalability: How unikernels can improve the status quo}},
year = {2016}
}

@inproceedings{kubeedge,
abstract = {In this paper, we introduce an infrastructure in edge computing environment, KubeEdge, to extend cloud capabilities to the edge. In the new form of cloud architecture, Cloud consists of computing resources both at centralized data centers and at distributed edges. KubeEdge infrastructure connects and coordinates two computing environments for applications leveraging both computing resources to achieve better performance and user experience. Technically, KubeEdge provides the network protocol infrastructure and the same runtime environment on the edge as in the cloud, which allows the seamless communication of applications with components running on edge nodes as well as cloud servers. It also allows the existing cloud services and cloud development model to be adopted at edge. Based on Kubernetes [1], KubeEdge architecture includes a network protocol stack called KubeBus, a distributed metadata store and synchronization service, and a lightweight agent (EdgeCore) for the edge. KubeBus is designed to have its own implementation of OSI network protocol layers, which connects servers at edge and VMs in the cloud as one virtual network. KubeBus provides a unified multitenant communication infrastructure with fault tolerance and high availability. The distributed metadata store and sync service is designed to support the offline scenario when edge nodes are not connected to the cloud. EdgeController component in KubeEdge architecture is a controller plugin for Kubernetes [1] to manage remote edge nodes and cloud VMs as one logical cluster, which enables KubeEdge to schedule, deploy and manage container applications across edge and cloud with the same API.},
author = {Xiong, Ying and Sun, Yulin and Xing, Li and Huang, Ying},
booktitle = {Proceedings - 2018 3rd ACM/IEEE Symposium on Edge Computing, SEC 2018},
doi = {10.1109/SEC.2018.00048},
file = {:Users/atakanyenel/Library/Application Support/Mendeley Desktop/Downloaded/Xiong et al. - 2018 - Extend cloud to edge with KubeEdge.pdf:pdf},
isbn = {9781538694459},
keywords = {Cloud computing,Data synchronization,Distributed systems,Edge computing,Network protocol},
month = {dec},
pages = {373--377},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Extend cloud to edge with KubeEdge}},
year = {2018}
}


@inproceedings{fledge,
abstract = {In recent years, containers have quickly gained popularity in the cloud, mostly thanks to their scalable, ethereal and isolated nature. Simultaneously, edge devices have become powerful enough to run con-tainerized microservices, while remaining small and low-powered. These evolutions have triggered a wave of research into container placement strategies on clusters including edge devices, leading to concepts such as fog computing. These container placement strategies can optimize work-load placement across cloud and edge clusters, but current container orchestrators are very resource intensive and are not designed to run on edge devices. This paper presents FLEDGE as a Kubernetes compatible edge container orchestrator. A number of aspects of how to achieve low-resource container orchestration are examined, for example the choice of container runtime and how to implement container networking. Finally, a number of evaluations are performed, comparing FLEDGE to K3S and Kubernetes, to show that it is a viable alternative to existing container orchestrators.},
author = {Goethals, Tom and Volckaert, Bruno and {De Turck}, Filip},
booktitle = {9th IEEE International Symposium on Cloud and Service Computing},
file = {:Users/atakanyenel/Library/Application Support/Mendeley Desktop/Downloaded/Goethals - Unknown - FLEDGE Kubernetes Compatible Container Orchestration on Low-resource Edge Devices.pdf:pdf},
title = {{FLEDGE: Kubernetes Compatible Container Orchestration on Low-resource Edge Devices}},
year = {2019}
}

@misc{k3s,
title = {{K3s: Lightweight Kubernetes}},
url = {https://k3s.io/},
urldate = {2019-11-29}
}
@article{fades,
abstract = {{\textcopyright} 2017 Association for Computing Machinery. FADES is an edge offloading architecture that empowers us to run compact, single purpose tasks at the edge of the network to support a variety of IoT and cloud services. The design principle behind FADES is to efficiently exploit the resources of constrained edge devices through fine-grained computation offloading. FADES takes advantage of MirageOS unikernels to isolate and embed application logic in concise Xen-bootable images.We have implemented FADES and evaluated the system performance under various hardware and network conditions. Our results show that FADES can effectively strike a balance between running complex applications in the cloud and simple operations at the edge. As a solid step to enable finegrained edge offloading, our experiments also reveal the limitation of existing IoT hardware and virtualization platforms, which shed light on future research to bring unikernel into IoT domain.},
author = {Cozzolino, Vittorio and Ding, Aaron Yi},
doi = {10.475/123},
file = {:Users/atakanyenel/Desktop/thesis/literature/papers/fades-pre-camera.pdf:pdf},
isbn = {9781450350587},
journal = {Proceedings of HotConNet '17, Los Angeles, CA, USA,},
keywords = {2017,aaron yi ding,acm reference format,and j{\"{o}}rg ott,edge computing,fades,fine-grained,iot,virtualization,vittorio cozzolino},
pages = {36--41},
title = {{FADES: Fine-Grained Edge Offloading with Unikernels}},
year = {2017}
}
@misc{microk8s,
title = {{MicroK8s - Fast, Light, Upstream Developer Kubernetes}},
url = {https://microk8s.io/},
urldate = {2019-11-29}
}

@misc{cilium,
title = {{Cilium}},
url = {https://cilium.io/},
urldate = {2019-11-29}
}


@misc{Chandra2019,
author = {Chandra, Gokul},
title = {{Virtual Kubelet and Managing IoT Edge Devices with Azure Kubernetes Service (AKS)}},
url = {https://itnext.io/virtual-kubelet-and-managing-iot-edge-devices-with-azure-kubernetes-service-aks-97ad531e5ad8},
urldate = {2019-11-30},
year = {2019}
}


@inproceedings {jitsu,
author = {Anil Madhavapeddy and Thomas Leonard and Magnus Skjegstad and Thomas Gazagnaire and David Sheets and Dave Scott and Richard Mortier and Amir Chaudhry and Balraj Singh and Jon Ludlam and Jon Crowcroft and Ian Leslie},
title = {Jitsu: Just-In-Time Summoning of Unikernels},
booktitle = {12th {USENIX} Symposium on Networked Systems Design and Implementation ({NSDI} 15)},
year = {2015},
isbn = {978-1-931971-218},
address = {Oakland, CA},
pages = {559--573},
url = {https://www.usenix.org/conference/nsdi15/technical-sessions/presentation/madhavapeddy},
publisher = {{USENIX} Association},
month = may,
}

@misc{solo5,
title = {{Solo5/solo5: A sandboxed execution environment for unikernels}},
url = {https://github.com/Solo5/solo5},
urldate = {2019-12-02}
}

@misc{opammirage,
title = {opam - mirage},
url = {https://opam.ocaml.org/packages/mirage/},
urldate = {2019-12-03}
}


@article{Bonk,
abstract = {MirageOS is a modern library operating system written in the functional, memory-safe OCaml programming language. Users of MirageOS write application code in OCaml and link against various libraries provided by Mi-rageOS. These include a complete network stack (Ethernet, IP, TCP, UDP, TLS) written in pure OCaml as well as a number of backends for receiving and transmitting packets. We introduce some of MirageOS' techniques for handling raw memory. We detail two of the various networking backends offered by MirageOS as well as a library used for safe abstraction over raw memory. We additionally suggest possible performance improvements in MirageOS. Finally we compare MirageOS with ixy.ml, a small userspace driver for ixgbe-compatible NICs written entirely in OCaml.},
author = {Bonk, Fabian and Emmerich, Paul},
doi = {10.2313/NET-2019-06-1_10},
file = {:Users/atakanyenel/Library/Application Support/Mendeley Desktop/Downloaded/Bonk, Emmerich - Unknown - Networking in MirageOS.pdf:pdf},
keywords = {Index Terms-library operating system,OCaml,networking,unikernel},
title = {{Networking in MirageOS}},
url = {https://ocaml.org/}
}

@misc{xl-man-page,
title = {{Ubuntu Manpage: xl - Xen management tool, based on LibXenlight}},
url = {http://manpages.ubuntu.com/manpages/bionic/man1/xl.1.html},
urldate = {2019-12-07}
}

@inproceedings{performance-isolation,
abstract = {With the rapid development of virtualization techniques, modern data centers move into a new era of cloud in recent years. Despite numerous advantages such as high resource utilization and rapid service scalability, current virtualization techniques don't guarantee perfect performance isolation among virtual machines sharing the physical machine, which may lead to unstable and unpredictable user-perceived application performance in clouds. Therefore, understanding and modeling performance interference among collocated applications is of utmost importance. However, the hypervisor and guest OSes usually run independent resource schedulers and are invisible into each other, thereby making accurately characterizing performance interference a non-trivial work. In this paper, we first present a comprehensive experimental study on performance interference of different combinations of benchmarks, observing that virtual CPU floating overhead between multiple physical CPUs, and VMEXITs, i.e., the control transitions between the hypervisor and VMs, constitute the key source of performance interference. In order to characterize the performance interference effects, we measure both the application-level and VM-level characteristics from the collocated applications and then build a novel interference prediction framework based on kernel canonical correlation analysis. Our evaluations first show the practicability of KCCA in finding reliable correlation, and further confirm the high accuracy and great applicability of our interference model with a low prediction error of no more than 7.9{\%}.},
author = {Chi, Ruiqing and Qian, Zhuzhong and Lu, Sanglu},
booktitle = {Proceedings of the International Conference on Parallel and Distributed Systems - ICPADS},
doi = {10.1109/PADSW.2014.7097816},
file = {:Users/atakanyenel/Library/Application Support/Mendeley Desktop/Downloaded/Chi, Qian, Lu - 2014 - Be a good neighbour Characterizing performance interference of virtual machines under xen virtualization environm.pdf:pdf},
isbn = {9781479976157},
issn = {15219097},
keywords = {Xen,cloud computing,performance interference},
pages = {257--264},
publisher = {IEEE Computer Society},
title = {{Be a good neighbour: Characterizing performance interference of virtual machines under xen virtualization environments}},
volume = {2015-April},
year = {2014}
}


@techreport{Deshane,
abstract = {We present initial results from and quantitative analysis of two leading open source hypervisors, Xen and KVM. This study focuses on the overall performance, performance isolation, and scalability of virtual machines running on these hypervisors. Our comparison was carried out using a benchmark suite that we developed to make the results easily repeatable. Our goals are to understand how the different architectural decisions taken by different hypervisor developers affect the resulting hypervisors, to help hypervisor developers realize areas of improvement for their hypervisors, and to help users make informed decisions about their choice of hypervisor.},
author = {Deshane, Todd and Shepherd, Zachary and Matthews, Jeanna N and Ben-Yehuda, Muli and Rao, Balaji},
file = {:Users/atakanyenel/Library/Application Support/Mendeley Desktop/Downloaded/Deshane et al. - Unknown - Quantitative Comparison of Xen and KVM(2).pdf:pdf},
title = {{Quantitative Comparison of Xen and KVM}},
url = {http://www.cs.indiana.edu/{~}mhtang/paper.pdf,}
}

@misc{mailing-list,
author={P. Meireles},
year={2017},
title = {m0n0wall{\&}virtualization},
url = {https://m0n0wall.m0n0.narkive.com/OI4NbHQq/m0n0wall-virtualization},
urldate = {2019-12-07}
}

@misc{CVE-2019-5736-details,
title = {{NVD - CVE-2019-5736}},
url = {https://nvd.nist.gov/vuln/detail/CVE-2019-5736},
urldate = {2019-12-07}
}


@misc{CVE-2019-14271-details,
year={2019},
title = {{NVD - CVE-2019-14271}},
url = {https://nvd.nist.gov/vuln/detail/CVE-2019-14271},
urldate = {2019-12-07}
}

@misc{CVE-2018-9862-details,
year={2018},
title = {{NVD - CVE-2018-9862}},
url = {https://nvd.nist.gov/vuln/detail/CVE-2018-9862},
urldate = {2019-12-07}
}

@misc{CVE-2018-8115-details,
year={2018},
title = {{NVD - CVE-2018-8115}},
url = {https://nvd.nist.gov/vuln/detail/CVE-2018-8115},
urldate = {2019-12-07}
}

@misc{CVE-2018-11757-details,
year={2018},
title = {{NVD - CVE-2018-11757}},
url = {https://nvd.nist.gov/vuln/detail/CVE-2018-11757},
urldate = {2019-12-07}
}


@article{Duncan2017,
abstract = {Achieving cloud security is not a trivial problem and developing and enforcing good cloud security controls is a fundamental requirement if this is to succeed. The very nature of cloud computing can add additional problem layers for cloud security to an already complex problem area. We discuss why this is such an issue, consider what desirable characteristics should be aimed for and propose a novel means of effectively and efficiently achieving these goals through the use of unikernel based systems. The main thrust of this position paper is to discuss the key issues which need to be addressed, noting which of those might be covered by our proposed approach. We discuss how our proposed approach may help better address the key security issues we have identified.},
author = {Duncan, Bob and Bratterud, Alfred and Happe, Andreas},
doi = {10.1109/INTECH.2016.7845113},
file = {:Users/atakanyenel/Desktop/thesis/literature/papers/3-enhancing-cloud-security.pdf:pdf},
isbn = {9781509020003},
journal = {2016 6th International Conference on Innovative Computing Technology, INTECH 2016},
keywords = {Cloud security and privacy,complexity,compliance,management control},
pages = {110--115},
publisher = {IEEE},
title = {{Enhancing cloud security and privacy: Time for a new approach?}},
year = {2017}
}


@article{virtio,
 author = {Russell, Rusty},
 title = {Virtio: Towards a De-facto Standard for Virtual I/O Devices},
 journal = {SIGOPS Oper. Syst. Rev.},
 issue_date = {July 2008},
 volume = {42},
 number = {5},
 month = jul,
 year = {2008},
 issn = {0163-5980},
 pages = {95--103},
 numpages = {9},
 url = {http://doi.acm.org/10.1145/1400097.1400108},
 doi = {10.1145/1400097.1400108},
 acmid = {1400108},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {I/O, KVM, Linux, lguest, ring buffer, virtio, virtio_pci, virtualization, vring},
} 


@inproceedings{multilayered,
author = {Jindal, Anshul and Podolskiy, Vladimir and Gerndt, Michael},
year = {2017},
month = {11},
pages = {24-31},
title = {Multilayered Cloud Applications Autoscaling Performance Estimation},
doi = {10.1109/SC2.2017.12}
}

@misc{arch-photo,
url={https://resources.infosecinstitute.com/11-points-consider-virtualizing-security/}
}

@misc{2019-survey,
title = {{Stack Overflow Developer Survey 2019}},
url = {https://insights.stackoverflow.com/survey/2019{\#}most-loved-dreaded-and-wanted},
urldate = {2019-12-17}
}

@inproceedings{borg,
title	= {Large-scale cluster management at {Google} with {Borg}},
author	= {Abhishek Verma and Luis Pedrosa and Madhukar R. Korupolu and David Oppenheimer and Eric Tune and John Wilkes},
year	= {2015},
booktitle	= {Proceedings of the European Conference on Computer Systems (EuroSys)},
address	= {Bordeaux, France}
}

@techreport{acm-borg,
abstract = {system evolution T hough widespread interest in software containers is a relatively recent phenomenon, at Google we have been managing Linux containers at scale for more than ten years and built three different container-management systems in that time. Each system was heavily influenced by its predecessors, even though they were developed for different reasons. This article describes the lessons we've learned from developing and operating them. The first unified container-management system developed at Google was the system we internally call Borg. 7 It was built to manage both long-running services and batch jobs, which had previously been handled by two separate systems: Babysitter and the Global Work Queue. The latter's architecture strongly influenced Borg, but was focused on batch jobs; both predated Linux control groups. Borg shares machines between these two types of applications as a way of increasing resource utilization and thereby reducing costs. Such sharing was possible because container support in the Linux kernel was becoming available (indeed, Google contributed much of the container code to the Linux kernel), which enabled better isolation between latency-sensitive user-facing services and CPU-hungry batch processes.},
author = {Burns, Brendan and Grant, Brian and Oppenheimer, David and Brewer, Eric and Wilkes, John},
file = {:Users/atakanyenel/Library/Application Support/Mendeley Desktop/Downloaded/Burns et al. - Unknown - Lessons learned from three container-management systems over a decade TEXT ONLY.pdf:pdf},
title = {{Lessons learned from three container-management systems over a decade TEXT ONLY}}
}


@online{unik-youtube,
        title = {Unik: Unikernel Runtime for Kubernetes by Idit Levine, EMC},
        date = {2016},
        organization = {Youtube},
        author = {Cloud Native Computing Foundation},
        url = {https://www.youtube.com/watch?v=wcZWg3YtvnY},
    }

  @misc{azure-vk,
  author= {Gokul Chandra},
title = {{Virtual Kubelet and Managing IoT Edge Devices with Azure Kubernetes Service (AKS)}},
url = {https://itnext.io/virtual-kubelet-and-managing-iot-edge-devices-with-azure-kubernetes-service-aks-97ad531e5ad8},
urldate = {2020-01-03}
}

@misc{protobuf,
title = {{Virtual Kubelet and Managing IoT Edge Devices with Azure Kubernetes Service (AKS)}},
url = {https://itnext.io/virtual-kubelet-and-managing-iot-edge-devices-with-azure-kubernetes-service-aks-97ad531e5ad8},
urldate = {2020-01-03}
}
